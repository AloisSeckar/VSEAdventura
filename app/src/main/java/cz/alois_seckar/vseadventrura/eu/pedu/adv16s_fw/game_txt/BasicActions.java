/* The file is saved in UTF-8 codepage.
 * Check: «Stereotype», Section mark-§, Copyright-©, Alpha-α, Beta-β, Smile-☺
 */
package cz.alois_seckar.vseadventrura.eu.pedu.adv16s_fw.game_txt;

import cz.alois_seckar.vseadventrura.eu.pedu.adv16s_fw.scenario.TypeOfStep;

import java.util.Collections;
import java.util.EnumMap;
import java.util.Map;



/*******************************************************************************
 * Instances of the {@code BasicActions} class represents crates
 * containing the names of mandatory actions.
 *
 * @author  Rudolf PECINOVSKÝ
 * @version 2016-Summer
 */
public class BasicActions
{
//== CONSTANT CLASS FIELDS =====================================================
//== VARIABLE CLASS FIELDS =====================================================



//##############################################################################
//== STATIC INITIALIZER (CLASS CONSTRUCTOR) ====================================
//== CLASS GETTERS AND SETTERS =================================================
//== OTHER NON-PRIVATE CLASS METHODS ===========================================
//== PRIVATE AND AUXILIARY CLASS METHODS =======================================



//##############################################################################
//== CONSTANT INSTANCE FIELDS ==================================================

    /** Name of the action for moving into neighboring space. */
    public final String MOVE_CMD_NAME;

    /** Name of the action for taking item from the bag
     *  and putting it down into the current space. */
    public final String PUT_DOWN_CMD_NAME;

    /** Name of the action for taking item from the current
     *  space and putting it into bag. */
    public final String TAKE_CMD_NAME;

    /** Name of the action for asking for help. */
    public final String HELP_CMD_NAME;

    /** Name of the action for immediate game termination. */
    public final String END_CMD_NAME;

    /** Map allowing to get the action name after entering its type. */
    public final Map<TypeOfStep, String> type2name;



//== VARIABLE INSTANCE FIELDS ==================================================

    /** The textual signature generated by {@link #toString()} method;
     *  it is not created until the first request. */
    private String toString;

    /** Hash kód instance – vytváří se až při prvním požadavku. */
    private int hash;



//##############################################################################
//== CONSTRUCTORS AND FACTORY METHODS ==========================================

    /***************************************************************************
     * Returns the crate with names of mandatory actions,
     * i.e. actions which have to be implemented in all games.
     * The names must not contain whitespaces (they should be one-word).
     *
     * @param move     Name of the action for moving into neighboring space
     * @param take     Name of the action for taking item from the bag
     *                 and putting it down into the current space
     * @param putDown  Name of the action for taking item from the current
     *                 space and putting it into bag
     * @param help     Name of the action for asking for help
     * @param end      Name of the action for immediate game termination
     */
    public BasicActions(String move, String take, String putDown,
                        String help, String end)
    {
        MOVE_CMD_NAME     = move;
        TAKE_CMD_NAME     = take;
        PUT_DOWN_CMD_NAME = putDown;
        HELP_CMD_NAME     = help;
        END_CMD_NAME      = end;
        verifyArguments(move, putDown, take, help, end);

        Map<TypeOfStep, String> map = new EnumMap<>(TypeOfStep.class);
        map.put(TypeOfStep.tsMOVE,     move);
        map.put(TypeOfStep.tsPUT_DOWN, putDown);
        map.put(TypeOfStep.tsTAKE,     take);
        map.put(TypeOfStep.tsHELP,     help);
        map.put(TypeOfStep.tsEND,      end);

        type2name = Collections.unmodifiableMap(map);
    }



//== ABSTRACT METHODS ==========================================================
//== INSTANCE GETTERS AND SETTERS ==============================================
//== OTHER NON-PRIVATE INSTANCE METHODS ========================================

    /***************************************************************************
     * Indicates whether the given object is "equal to" this one.
     * The instances of the {@code BasicActions} class are equals
     * when the particular names are equals ignoring case.
     *
     * @param obj The object with which to compare
     * @return {@code true} if this objects is equal to the {@code obj}
     *         argument, {@code false} otherwise
     */
    @Override
    public boolean equals(Object obj)
    {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final BasicActions other = (BasicActions) obj;
        boolean equals = this .MOVE_CMD_NAME.equalsIgnoreCase(
                         other.MOVE_CMD_NAME)
                         &&
                         this .PUT_DOWN_CMD_NAME.equalsIgnoreCase(
                         other.PUT_DOWN_CMD_NAME)
                         &&
                         this .TAKE_CMD_NAME.equalsIgnoreCase(
                         other.TAKE_CMD_NAME)
                         &&
                         this .END_CMD_NAME.equalsIgnoreCase(
                         other.END_CMD_NAME)
                         &&
                         this .HELP_CMD_NAME.equalsIgnoreCase(
                         other.HELP_CMD_NAME);
        return equals;
    }


    /***************************************************************************
     * Returns a hash code value for the crate.
     *
     * @return A hash code value for this object
     */
    @Override
    public int hashCode()
    {
        if (hash== 0)
        {
            hash = 7;
            hash = 79 * hash + this.MOVE_CMD_NAME    .toUpperCase().hashCode();
            hash = 79 * hash + this.PUT_DOWN_CMD_NAME.toUpperCase().hashCode();
            hash = 79 * hash + this.TAKE_CMD_NAME    .toUpperCase().hashCode();
            hash = 79 * hash + this.END_CMD_NAME     .toUpperCase().hashCode();
            hash = 79 * hash + this.HELP_CMD_NAME    .toUpperCase().hashCode();
        }
        return hash;
    }


    /***************************************************************************
     * Return the text signature of the crate composed from the class name
     * followed by enumeration of the attribute values
     * closed in the brackets.
     *
     * @return Instance text signature
     */
    @Override
    public String toString()
    {
        if (toString == null) {
            toString = "BasicActions" +
                       "[MOVE="  + MOVE_CMD_NAME     +
                       ", PUT="  + PUT_DOWN_CMD_NAME +
                       ", PICK=" + TAKE_CMD_NAME  +
                       ", HELP=" + HELP_CMD_NAME     +
                       ", END="  + END_CMD_NAME      + "]";
        }
        return toString;
    }



//== PRIVATE AND AUXILIARY INSTANCE METHODS ====================================

    /***************************************************************************
     * Verify the correctness of the argument values, which must be neither
     * {@code null} nor the empty strings.
     *
     * @param names The verified values
     */
    private void verifyArguments(String... names)
    {
        for (String name : names) {
            if ((name == null)  ||  name.isEmpty()) {
                throw new IllegalArgumentException(
                    "\nCertain argument is either {@code null} "
                  + "or an empty string\n" + this);
            }
        }
    }



//##############################################################################
//== NESTED DATA TYPES =========================================================
}
